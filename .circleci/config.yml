version: 2.1

jobs:
  # ESLint in front-end
  front-end-eslint:
    docker: 
      - image: cimg/node:16.16.0
    steps:
      - checkout
      - run:
          working_directory: ./front-end
          command: |
            npm install
            npm run lint

  #ESLint in back-end
  back-end-eslint:
    docker:
      - image: cimg/node:16.16.0
    steps:
      - checkout
      - run:
          working_directory: ./back-end
          command: |
            npm install
            npm run lint

  # DEPLOYMENT_URL=$(vercel --name $CI_PROJECT_NAME --confirm -t $VERCEL_TOKEN)
  
  front-end-deploy:
    docker:
      - image: cimg/node:16.16.0
    steps: 
      - checkout
      - run: 
          working_directory: ./front-end
          command: npm install
      - run:
          working_directory: ./front-end
          command: echo "{"projectId":"prj_EbYfeF4gs5qXuWjESLHDGzQbEfjI","orgId":"sIpHFARbgZn3tMzH4k0WM3Tl"}" > .vercel/project.json
      - run:
          working_directory: ./front-end
          command: ./node_modules/vercel/dist/index.js --token ${VERCEL_TOKEN} --cwd . --confirm

  front-end-deploy-staging:
    docker:
      - image: cimg/node:16.16.0
    steps: 
      - checkout
      - run: 
          working_directory: ./front-end
          command: npm install
      - run:
          working_directory: ./front-end
          command: mkdir .vercel
      - run:
          working_directory: ./front-end/.vercel
          command: cat > project.json
      - run:
          working_directory: ./front-end/.vercel
          command: echo '{"projectId":"prj_bcNxQUlZG59972eilV1bYhfOyJJY","orgId":"TJGpH5dxctiVPEdvJovVIi5K"}' > project.json
      # - run:
      #     working_directory: ./front-end/.vercel
      #     command: cat project.json
      - run:
          working_directory: ./front-end
          command: ./node_modules/vercel/dist/index.js --token ${VERCEL_TOKEN} --cwd . --confirm --target staging
          
  back-end-deploy-staging:
    docker: 
      - image: cimg/node:16.16.0
    steps:
      - checkout
      - run:
          working_directory: ./back-end
          command: |
            npm install
            npm install vercel
      - run:
          working_directory: ./back-end
          command: mkdir .vercel
      - run:
          working_directory: ./back-end/.vercel
          command: cat > project.json
      - run:
          working_directory: ./back-end/.vercel
          command: echo '{"projectId":"prj_ZjVVykfK980IYr31aKEAn1hcsCsI","orgId":"TJGpH5dxctiVPEdvJovVIi5K"}' > project.json
      # - run:
      #     working_directory: ./back-end/.vercel
      #     command: cat project.json
      - run:
          working_directory: ./back-end
          command: ./node_modules/vercel/dist/index.js --token ${VERCEL_TOKEN} --cwd . --confirm --target staging


  # #Build and deploy back-end
  # back-end-deploy:
  #   docker:
  #     - image: cimg/node:16.16.0
  #   steps:
  #     - checkout
  #     - run: 
  #         working_directory: ./back-end
  #         command: |
  #           npm install
  #           vercel

workflows:
  # Front-end-workflow:
  #   jobs:
  #     - front-end-deploy:
  #         filters:
  #           branches:
  #             only:
  #               - Config-CircleCI-master
  #     - front-end-deploy-staging:
  #         filters:
  #           branches:
  #             only:
  #               - Config-CircleCI

  Back-end-workflow:
    jobs:
      - back-end-deploy-staging:
          filters:
            branches:
              only:
                - Config-CircleCI

  # Front-end-workflow:
  #   jobs:
      # - front-end-eslint
      # - front-end-deploy:
      #     requires:
      #       - front-end-eslint

  # Back-end-workflow:
  #   jobs:
  #     - front-end-eslint
      # - front-end-deploy:
      #     requires:
      #       - front-end-eslint
  # deploy to test on staging